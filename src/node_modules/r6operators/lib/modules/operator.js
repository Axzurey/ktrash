"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cheerio_1 = __importDefault(require("cheerio"));
var classnames_1 = __importDefault(require("classnames"));
var icons_json_1 = __importDefault(require("../icons.json"));
/**
 * Convert attributes object to string of HTML attributes.
 * @param {Object} attributes - Object containing the attributes.
 * @returns {string}
 */
function attributesToString(attributes) {
    return Object.keys(attributes)
        .map(function (key) { return key + "=\"" + attributes[key] + "\""; })
        .join(" ");
}
function Operator(id, contents) {
    // get attributes + values of the SVG string
    var $ = cheerio_1.default.load("" + icons_json_1.default[id]);
    var attributes = __assign(__assign({}, $("svg").get(0).attribs), { class: "r6operators r6operators-" + id });
    // create new icon object
    var icon = {
        svg: { contents: $("svg").html(), attributes: attributes },
    };
    // eslint-disable-next-line unicorn/consistent-function-scoping
    function toSVG(userAttributes) {
        // check if parameter is an object
        if (userAttributes && typeof userAttributes !== "object") {
            return new Error("The parameters are not supplied as an object.");
        }
        // create an object containing all attributes from the icon + user attributes
        var combinedAttributes = __assign(__assign(__assign({}, this.svg.attributes), userAttributes), {
            class: classnames_1.default(this.svg.attributes.class, userAttributes === undefined ? "" : userAttributes.class),
        });
        // return as a SVG string
        return "<svg " + attributesToString(combinedAttributes) + ">" + this.svg.contents + "</svg>";
    }
    return __assign(__assign(__assign({ id: id }, contents), icon), { toSVG: toSVG });
}
exports.default = Operator;
//# sourceMappingURL=operator.js.map